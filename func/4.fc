{-

  TASK 4 - (De)Serialize to Cell
  Write the methods
    a) for serialization of tuple of arbitrary values of different types to Cell
    b) for deserialization of Cell created by method above to original tuple

  `serialize` method gets as input tuple with arbitrary number of elements from 0
  to 128 (both 0 and 128 elements are allowed) and outputs Cell. Elements of the
  tuple may be `null`, `int`, `cell`, `slice`, `tuple` (with the same limitations
  as original tuple). It is guaranteed that the maximum nesting level of tuples
  is less than 4 and total number of elements less than 1024.
  `deserialize` method gets a cell produced by `serialize` method and should
  return origin tuple.

  Note, for illustrative purposes`serialize_t3` and `deserialize_t3` functions
  which serialize and deserialize tuple with exactly 3 elements
  (only null, int, cell and slice are supportd) to/from a cell  have been added.
  Participants are free to not use logic from there and come up with their own
  implementations.

  Tests will only check that test_tuple == deserialize(serialize(test_tuple)).
  Intermediate representation can be arbitrary.
-}


() recv_internal() {
}

;; testable
(cell) serialize(tuple values) method_id {
  int tuple_length = values.tuple_length();
  builder srl = begin_cell();
  repeat (tuple_length) {
    srl = srl.serialize_element(value~list_next());
  }
  return srl.end_cell();
}

;; testable
(tuple) deserialize(cell serialized) method_id {
  tuple t = new_tuple();
  slice cs = serialized.begin_parse();
  while (cs.slice_bits() > 0) {
    t~tpush(cs~deserialize_element_to_tuple(t));
  }
  return t;
}

;; ==== Illustrative material ====
builder serialize_element(builder b, var x) {
  if(is_null(x)) {
    b~store_uint(0,3);
  }
  if(is_int(x)) {
    int i_x = force_cast_to_int(x);
    b = b.store_uint(1,3).store_int(i_x, 257);
  }
  if(is_cell(x)) {
    cell c_x = force_cast_to_cell(x);
    b = b.store_uint(2,3).store_ref(c_x);
  }
  if(is_slice(x)) {
    slice s_x = force_cast_to_slice(x);
    b = b.store_uint(3,3).store_ref(begin_cell().store_slice(s_x).end_cell());
  }
  if(is_tuple(x)) {
    tuple t_x = force_cast_to_tuple(x);
    int t_len = t_x.tuple_length();
    builder b = begin_cell().store_uint(4, 3);
    repeat (t_len) {
      b = b.serialize_element(t_x~list_next());
    }
  }
  return b;
}

(slice, tuple) deserialize_element_to_tuple(slice s, tuple t) {
  int element_type = s~load_uint(3);
  if(element_type == 0) {
    t~tpush(null());
  }
  if(element_type == 1) {
    t~tpush(s~load_int(257));
  }
  if(element_type == 2) {
    t~tpush(s~load_ref());
  }
  if(element_type == 3) {
    t~tpush(s~load_ref().begin_parse());
  }
  if (element_type == 4) {
    tuple nested_t = empty_tuple();
    (s, tuple nested_t) = s.deserialize_element_to_tuple(nested_t);
    t~tpush(nested_t);
  }
  return (s,t);
}

cell serialize_t3(tuple three_elements) method_id {
  throw_unless(777, three_elements.tuple_length() == 3);
  builder srl = begin_cell();
  srl = serialize_element(srl, three_elements.first());
  srl = serialize_element(srl, three_elements.second());
  srl = serialize_element(srl, three_elements.third());
  return srl.end_cell();
}

tuple deserialize_t3(cell sc) method_id {
  slice s = sc.begin_parse();
  tuple t = empty_tuple();
  repeat (3) {
    (s,t) = deserialize_element_to_tuple(s,t);
  }
  return t;
}

