{-

  TASK 3 - Message validation.
  Write the method that checks that cell contains valid message
  in accordance to https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L155
  Note, tests will only cover valid and invalid MessageAny objects,
  valid MessageRelaxed (which are not simultaneously MessageAny) will not be presented
  If message is invalid for any reason - method should return (0, null), otherwise
  it should return (-1, [slice src, slice dest, int amount] ), where src, dest and
  amount represents source of the message, destination of the message and attached
  amount of TONs. If any of those values are not presented (or presented as
  addr_none slice) in the message cell - they should be substituted with null.
  It is guaranteed that for all tests any HashmapE datatype in message structure
  is empty hashmaps (has hme_empty constructor).
  Documentation on TL-B schemes can be found in https://ton.org/docs/#/overviews/TL-B
-}

;;; Taken from https://github.com/ton-blockchain/func-contest2-solutions/blob/main/3.fc
int is_int_msg(cell msg) asm "<{ CTOS 1 LDU SWAP ISZERO 44 THROWIFNOT 3 PUSHINT SDSKIPFIRST LDMSGADDR SWAP REWRITESTDADDR 2DROP LDMSGADDR SWAP REWRITESTDADDR 2DROP LDGRAMS NIP SKIPDICT LDGRAMS NIP LDGRAMS NIP 96 PUSHINT SDSKIPFIRST 1 LDU SWAP <{ 1 LDU SWAP <{ LDREF DROP }>CONT IF }>CONT IF 1 LDU SWAP <{ LDREF DROP }>CONT IF DROP -1 PUSHINT }>CONT <{ DROP 0 PUSHINT }>CONT 1 1 TRYARGS";
int is_ext_in_msg(cell msg) asm "<{ CTOS 2 LDU SWAP 2 EQINT 44 THROWIFNOT LDMSGADDR SWAP 1 LDU DROP ISZERO 45 THROWIFNOT LDMSGADDR SWAP REWRITESTDADDR 2DROP LDGRAMS NIP 1 LDU SWAP <{ 1 LDU SWAP <{ LDREF DROP }>CONT IF }>CONT IF 1 LDU SWAP <{ LDREF DROP }>CONT IF DROP -1 PUSHINT }>CONT <{ DROP 0 PUSHINT }>CONT 1 1 TRYARGS";
int is_ext_out_msg(cell msg) asm "<{ CTOS 2 LDU SWAP 3 EQINT 44 THROWIFNOT LDMSGADDR SWAP REWRITESTDADDR 2DROP LDMSGADDR SWAP 1 LDU DROP ISZERO 45 THROWIFNOT 96 PUSHINT SDSKIPFIRST 1 LDU SWAP <{ 1 LDU SWAP <{ LDREF DROP }>CONT IF }>CONT IF 1 LDU SWAP <{ LDREF DROP }>CONT IF DROP -1 PUSHINT }>CONT <{ DROP 0 PUSHINT }>CONT 1 1 TRYARGS";
slice null_if_addr_none(slice s) asm "DUP b{00} PUSHSLICE SDEQ NULL ROT CONDSEL";
;;;

(int, tuple) invalid() inline {
  return (0, null());
}

(int, tuple) parse_int_msg(cell message) {
  var cs = message.begin_parse();
  cs~skip_bits(4);
  slice src = cs~load_msg_addr();
  slice dst = cs~load_msg_addr();
  int amount = cs~load_grams();
  return (-1, [null_if_addr_none(src), null_if_addr_none(dst), amount]);
}

(int, tuple) parse_ext_msg(cell message) {
  var cs = message.begin_parse();
  cs~skip_bits(2);
  slice src = cs~load_msg_addr();
  slice dst = cs~load_msg_addr();
  return (-1, [null_if_addr_none(src), null_if_addr_none(dst), null()]);
}

() recv_internal() {
}


;; testable
(int, tuple) validate_message(cell message) method_id {
  if (is_int_msg(message)) {
    return parse_int_msg(message);
  }
  if (is_ext_in_msg(message) | is_ext_out_msg(message)) {
    return parse_ext_msg(message);
  }

  return invalid();
}
