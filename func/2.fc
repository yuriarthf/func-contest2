{-

  TASK 2 - Merge hashmaps (dictionaries)
  Write the method that merges two hashmaps into one. When keys of hashmaps
  interesect - values from first hashmap should be used, while discarded
  key/value pairs should be stored into separate hashmap.
  Method should return two hashmaps (merged_dict, discared_dict). If any
  of resulting hashmaps is empty it should be represented by `null` value.
  Hashmap key length is 256 bit. Each hashmap has at most 256 elements.
-}

() recv_internal() {
}


;; testable
(cell, cell) merge_hashmaps(cell dict1, cell dict2) method_id {

  cell merge_dict = new_dict();
  cell discarded_dict = new_dict();
  int key = -1;
  do {
    (key, slice value, int f) = dict1.udict_get_next?(256, key);
    if (f) {
      merge_dict~udict_set(256, key, value);
    }
  } until (~ f);

  key = -1;
  do {
    (key, slice value, int f) = dict2.udict_get_next?(256, key);
    if (f) {
      (_, int repeated) = merge_dict.udict_get?(256, key);
      if (repeated) {
        discarded_dict~udict_set(256, key, value);
      } else {
        merge_dict~udict_set(256, key, value);
      }
    }
  } until (~ f);

  return (merge_dict, discarded_dict);
}
