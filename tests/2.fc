slice to_slice(int value) inline {
  return begin_cell().store_uint(value, 256).end_cell().begin_parse();
}

int from_slice(slice value) inline {
  return value~load_uint(256);
}

() test_udict_value(cell dict, int key, int expected_value) impure {
  (slice value, int f) = dict.udict_get?(256, key);
  throw_unless(100, f);
  throw_unless(101, from_slice(value) == expected_value);
}

int __test_merge_1() {
  cell dict1 = new_dict();
  cell dict2 = new_dict();

  ;; set dict1 values
  dict1~udict_set(256, 1, to_slice(1));
  dict1~udict_set(256, 3, to_slice(3));
  dict1~udict_set(256, 4, to_slice(4));
  dict1~udict_set(256, 5, to_slice(5));
  dict1~udict_set(256, 6, to_slice(1));

  ;; set dict2 values
  dict2~udict_set(256, 2, to_slice(2));
  dict2~udict_set(256, 3, to_slice(4));
  dict2~udict_set(256, 5, to_slice(6));
  dict2~udict_set(256, 7, to_slice(7));

  var (int gas_used, stack) = invoke_method(merge_hashmaps, [dict1, dict2]);
  [cell merge_dict, cell discarded_dict] = stack;

  ;; test merge_dict
  test_udict_value(merge_dict, 1, 1);
  test_udict_value(merge_dict, 2, 2);
  test_udict_value(merge_dict, 3, 3);
  test_udict_value(merge_dict, 4, 4);
  test_udict_value(merge_dict, 5, 5);
  test_udict_value(merge_dict, 6, 1);
  test_udict_value(merge_dict, 7, 7);

  ;; test discarded_dict
  test_udict_value(discarded_dict, 3, 4);
  test_udict_value(discarded_dict, 5, 6);

  return gas_used;
}